import os
from flask import Flask, request, jsonify, session

app = Flask(__name__)
app.secret_key = "supersecretkey"  # Necesario para manejar sesi√≥n en Flask

# --- Base de datos m√©dica ---
symptoms_db = {
    "c√°ncer de mama": {
        "s√≠ntomas": [
            "bulto en el seno", "bulto en la axila", "cambios en el pez√≥n",
            "secreci√≥n anormal del pez√≥n", "piel enrojecida en el seno"
        ],
        "mensaje": "El c√°ncer de mama puede detectarse tempranamente con autoexamen y mamograf√≠a."
    },
    "c√°ncer de pulm√≥n": {
        "s√≠ntomas": [
            "tos persistente", "tos con sangre", "dolor en el pecho",
            "dificultad para respirar", "p√©rdida de peso inexplicada"
        ],
        "mensaje": "El c√°ncer de pulm√≥n suele estar asociado al tabaco, pero tambi√©n puede aparecer en no fumadores."
    },
    "c√°ncer de colon": {
        "s√≠ntomas": [
            "cambios en el h√°bito intestinal", "sangrado rectal",
            "dolor abdominal persistente", "anemia inexplicada"
        ],
        "mensaje": "El c√°ncer de colon puede prevenirse con chequeos regulares y colonoscop√≠as."
    },
    "c√°ncer de piel": {
        "s√≠ntomas": [
            "lunar con bordes irregulares", "cambio de color en la piel",
            "mancha que crece", "lesi√≥n que sangra o no cicatriza"
        ],
        "mensaje": "El c√°ncer de piel puede prevenirse evitando la exposici√≥n excesiva al sol y usando protector solar."
    },
    "c√°ncer de pr√≥stata": {
        "s√≠ntomas": [
            "dificultad al orinar", "dolor en la pelvis",
            "sangre en la orina", "flujo urinario d√©bil"
        ],
        "mensaje": "El c√°ncer de pr√≥stata es com√∫n en hombres mayores y puede detectarse con un examen de PSA."
    },
    "c√°ncer de est√≥mago": {
        "s√≠ntomas": [
            "acidez persistente", "dolor estomacal cr√≥nico",
            "v√≥mitos con sangre", "p√©rdida de apetito"
        ],
        "mensaje": "El c√°ncer de est√≥mago puede estar relacionado con la infecci√≥n por H. pylori y la dieta."
    },
    "leucemia": {
        "s√≠ntomas": [
            "fatiga extrema", "infecciones frecuentes",
            "moretones f√°ciles", "sangrado de enc√≠as", "fiebre sin causa aparente"
        ],
        "mensaje": "La leucemia afecta la producci√≥n de gl√≥bulos en la m√©dula √≥sea y requiere estudios de sangre para detectarla."
    },
    "c√°ncer de h√≠gado": {
        "s√≠ntomas": [
            "piel amarillenta", "dolor en la parte superior derecha del abdomen",
            "hinchaz√≥n abdominal", "p√©rdida de peso r√°pida"
        ],
        "mensaje": "El c√°ncer de h√≠gado suele estar relacionado con la cirrosis y la hepatitis cr√≥nica."
    }
}

# Preguntas frecuentes
faq_db = {
    "qu√© es el c√°ncer": "El c√°ncer es un conjunto de enfermedades donde las c√©lulas crecen de manera descontrolada y pueden invadir otros tejidos.",
    "c√≥mo se previene el c√°ncer": "Manteniendo una dieta saludable, evitando el tabaco y alcohol, ejercit√°ndose regularmente y haci√©ndose chequeos m√©dicos.",
    "qu√© pruebas existen": "Depende del tipo de c√°ncer. Existen mamograf√≠as, colonoscop√≠as, tomograf√≠as, resonancias, an√°lisis de sangre y biopsias.",
    "cu√°ndo ir al m√©dico": "Siempre que tengas s√≠ntomas persistentes como dolor, sangrado, bultos, fiebre inexplicada o p√©rdida de peso sin motivo."
}

# --- Interfaz Web ---
@app.route("/")
def index():
    return """
    <!DOCTYPE html>
    <html lang="es">
    <head>
        <meta charset="UTF-8">
        <title>Chatbot M√©dico</title>
        <style>
            body { font-family: Arial, sans-serif; background: #f4f6f9; display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; }
            .chat-container { width: 480px; background: #fff; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); display: flex; flex-direction: column; overflow: hidden; }
            .chat-header { background: #4CAF50; color: #fff; padding: 15px; text-align: center; font-size: 18px; }
            #chat-box { flex: 1; padding: 10px; overflow-y: auto; background: #fafafa; }
            .user { color: #2196F3; margin: 8px 0; }
            .bot { color: #4CAF50; margin: 8px 0; }
            .input-container { display: flex; border-top: 1px solid #ddd; }
            input { flex: 1; padding: 10px; border: none; outline: none; }
            button { padding: 10px 15px; border: none; background: #4CAF50; color: #fff; cursor: pointer; }
            button:hover { background: #45a049; }
        </style>
    </head>
    <body>
        <div class="chat-container">
            <div class="chat-header">ü§ñ Chatbot M√©dico</div>
            <div id="chat-box"></div>
            <div class="input-container">
                <input id="user-input" type="text" placeholder="Escribe tu mensaje...">
                <button onclick="sendMessage()">Enviar</button>
            </div>
        </div>

        <script>
        async function sendMessage() {
            const input = document.getElementById("user-input");
            const message = input.value;
            if (!message) return;

            const chatBox = document.getElementById("chat-box");
            chatBox.innerHTML += `<div class='user'><b>T√∫:</b> ${message}</div>`;
            input.value = "";

            try {
                const res = await fetch("/chat", {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({message})
                });
                const data = await res.json();
                chatBox.innerHTML += `<div class='bot'><b>Bot:</b> ${data.response}</div>`;
                chatBox.scrollTop = chatBox.scrollHeight;
            } catch (err) {
                chatBox.innerHTML += `<div style='color:red;'><b>Error:</b> No se pudo conectar al servidor.</div>`;
            }
        }
        </script>
    </body>
    </html>
    """


# --- L√≥gica de conversaci√≥n ---
@app.route("/chat", methods=["POST"])
def chat():
    user_message = request.json.get("message", "").lower()

    if "historia" not in session:
        session["historia"] = []

    session["historia"].append({"usuario": user_message})
    response = ""

    # Revisar preguntas frecuentes
    for key, answer in faq_db.items():
        if key in user_message:
            response = answer
            break

    # Revisar s√≠ntomas y c√°nceres
    if response == "":
        for cancer, data in symptoms_db.items():
            if cancer in user_message:
                response = f"El {cancer} puede presentar s√≠ntomas como: {', '.join(data['s√≠ntomas'])}. {data['mensaje']}"
                break
            for s in data["s√≠ntomas"]:
                if s in user_message:
                    response = f"El s√≠ntoma que mencionas ('{s}') puede estar relacionado con el {cancer}. {data['mensaje']}"
                    break

    # Conversaciones comunes
    if response == "":
        if "hola" in user_message or "buenas" in user_message:
            response = "¬°Hola! Soy tu asistente m√©dico virtual. ¬øTienes alg√∫n s√≠ntoma o pregunta sobre el c√°ncer?"
        elif "gracias" in user_message:
            response = "Con gusto üòä. Recuerda que esta informaci√≥n es solo orientativa y no reemplaza la atenci√≥n m√©dica profesional."
        elif "adi√≥s" in user_message or "chau" in user_message:
            response = "Ha sido un placer ayudarte. ¬°Cuida tu salud y hasta pronto!"
        else:
            response = "Entiendo lo que dices. ¬øPodr√≠as especificar mejor tu s√≠ntoma o tu duda? Por ejemplo: 'Tengo sangrado rectal' o '¬øQu√© es el c√°ncer de mama?'."

    response += " ‚ö†Ô∏è Esto no sustituye una consulta m√©dica. Te recomiendo visitar a un profesional de la salud."
    session["historia"].append({"bot": response})

    return jsonify({"response": response, "historia": session["historia"]})


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
